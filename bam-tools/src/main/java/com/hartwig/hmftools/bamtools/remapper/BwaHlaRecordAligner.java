package com.hartwig.hmftools.bamtools.remapper;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.hartwig.hmftools.common.genome.refgenome.RefGenomeVersion;
import com.hartwig.hmftools.esvee.assembly.alignment.Aligner;

import org.apache.commons.lang3.tuple.ImmutablePair;
import org.broadinstitute.hellbender.utils.bwa.BwaMemAlignment;
import org.jetbrains.annotations.NotNull;

import htsjdk.samtools.SAMFileHeader;
import htsjdk.samtools.SAMRecord;

public class BwaHlaRecordAligner implements HlaRecordAligner
{

    private @NotNull
    final Aligner aligner;
    private @NotNull
    final SAMFileHeader header;
    private @NotNull
    final RefGenomeVersion refGenomeVersion = RefGenomeVersion.V38; // TODO make parameter

    public BwaHlaRecordAligner(@NotNull final Aligner aligner, @NotNull final SAMFileHeader newHeader)
    {
        this.aligner = aligner;
        header = newHeader;
    }

    @NotNull
    @Override
    public List<SAMRecord> alignPair(@NotNull final RecordPair pair)
    {
        System.out.println(pair.rightData().ReadName);

        ImmutablePair<List<BwaMemAlignment>, List<BwaMemAlignment>> alignments =
                aligner.alignSequences(pair.leftBasesForRealignment(), pair.rightBasesForRealignment());
        AlignmentsList leftAlignments = new AlignmentsList(alignments.getLeft());
        AlignmentsList rightAlignments = new AlignmentsList(alignments.getRight());

        if(pair.First.getReadName().equals("A00624:8:HHKYHDSXX:1:2559:3224:21292"))
        {
            System.out.println(pair);
        }
        // Get the most suitable alignment pair from among the possibilities
        // generated by these lists of alignments.
        AlignmentsSelector alignmentsSelector = new AlignmentsSelector(leftAlignments, rightAlignments);
        HlaAlignmentPair bestAlignedPair = alignmentsSelector.bestAlignmentPair(refGenomeVersion);
        SAMRecord principalLeftRemapped = bestAlignedPair.Left.createSamRecord(header, pair.leftData(), bestAlignedPair.Right);
        SAMRecord principalRightRemapped = bestAlignedPair.Right.createSamRecord(header, pair.rightData(), bestAlignedPair.Left);

        // Because our alignments have been calculated by BWA one pair at a time,
        // they are missing the "proper pair" flag, which is set based on statistical
        // properties of large batches. Put this back if the pair are close together.
        fixProperPairFlag(principalLeftRemapped);
        fixProperPairFlag(principalRightRemapped);

        // Create a result list and add the pair.
        List<SAMRecord> result = new ArrayList<>();
        result.add(principalLeftRemapped);
        result.add(principalRightRemapped);

        // Calculate and add any supplementary alignments.
        leftAlignments.supplementaryAlignments()
                .forEach(left -> result.add(left.createSamRecord(header, pair.leftData(), bestAlignedPair.Right)));
        rightAlignments.supplementaryAlignments()
                .forEach(right -> result.add(right.createSamRecord(header, pair.rightData(), bestAlignedPair.Left)));

        return result;
    }

    private static void fixProperPairFlag(SAMRecord record)
    {
        int insertLength = Math.abs(record.getInferredInsertSize());
        final boolean insertLengthOK = insertLength < 1000 && insertLength > 50;
        final boolean sameStrand = Objects.equals(record.getReferenceIndex(), record.getMateReferenceIndex());
        if(insertLengthOK && sameStrand)
        {
            record.setProperPairFlag(true);
        }
    }
}
